# -*- coding: utf-8 -*-
"""projet__Outils_BigData_Data_preparation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1znZWQ1QKQm9JS1wGXQnkSKxcw_hYNO9O
"""

import pandas as pd
import numpy as np
from scipy.stats import chi2_contingency
import matplotlib.pyplot as plt

#Importation des donnees de la FINDEX : micro_world.csv
data=pd.read_csv("micro_world.csv", encoding='latin1')
#Importation des donnees de l'IDH
hdi=pd.read_excel("HDI.xlsx")
data.head(3)

data.shape

data.columns

#On selectionne les variables qui nous interessent
data=data[["economy","regionwb","pop_adult","wgt","female","age",
"educ","emp_in","urbanicity_f2f","account","account_fin","account_mob",
"fin4","fin8","fin9","fin10b","fin11_1","fin11a","fin11b","fin11c","fin11d",
"fin11e","fin11f","fin11g","fin11h","fin22a","fin30","fin31a","fin31b","fin31c",
"fin32","fin37","fin42","fin45","saved", "pay_utilities","mobileowner","internetaccess","remittances"]]

data.head(3)



data.rename(columns={"fin4":"debit_card","fin8":"credit_card","fin9":"deposit_account",
                     "fin10b":"account_to_store","fin11_1":"AccountNoHelp","fin11a":"NoAc_Far",
                    "fin11b":"NoAc_Expensive","fin11c":"NoAc_LackDoc","fin11d":"NoAc_lackTrust",
                     "fin11e":"NoAc_ReligiousRea","fin11f":"NoAc_Money","fin11g":"NoAc_Family",
                     "fin11h":"NoAc_NoFinServices","fin22a":"borrowed_fromFinIns","fin30":"PaidBill","fin31a":"PaidBill_Ac",
                     "fin31b":"PaidBill_Mob","fin31c":"PaidBill_Cash","fin32":"Received_Wage",
                     "fin37":"Received_GovTransfer","fin42":"Received_AgriPayments","fin45":"Worries"},inplace=True)

#On crée une function permettant de renommer le nom de certains pays
#Ce renommage facilitera la fusion des dataframes  findex et hdi 
def replace_Colstring(data, column, value_to_replace, replacement_value):
    data.loc[:, column] = data[column].map(lambda x: str(x).replace(value_to_replace,
                                                                    replacement_value))
    return data

data=replace_Colstring(data,"economy"," SAR, China", "")
data=replace_Colstring(data,"economy",", Islamic Rep.", "")
data=replace_Colstring(data,"economy","West Bank and Gaza", "Palestine")
data=replace_Colstring(data,"economy",", RB", "")
data=replace_Colstring(data,"economy",", Arab Rep.", "")
data=replace_Colstring(data,"economy","Kyrgyz Republic", "Kyrgyzstan")
data=replace_Colstring(data,"economy","Slovak Republic", "Slovakia")

# On ne retientiendra que trois colonnes de la table HDI 
hdi=hdi[['HDI rank', 'Country', 'Human Development Index (HDI) ']]

# On fait la fusion des deux tables
data_hdi=data.merge(hdi,how="left",left_on="economy",right_on="Country",indicator=True)

#On identifie les observations pour lesquelles la fusion n'a pas marche
unmatched_data = data_hdi[data_hdi['_merge'] == 'left_only']
unmatched_data.shape

unmatched_data

# Ce sont les écnomies du Kosovo et Taiwan qui n'ont pas de correspondant dans la table IDH
unmatched_data.economy.unique()

#On supprime ces deux economies
a_exlure=['Kosovo', 'Taiwan, China']
data_hdi=data_hdi.loc[~data_hdi.economy.isin(a_exlure),]

data_hdi.economy.unique()

data_hdi.columns

# Creation des classes pour l'IDH
data_hdi['class_IDH'] = np.where(data_hdi["HDI rank"] < 67, 'VeryHight_IDH',
                         np.where((data_hdi["HDI rank"] >= 67) & (data_hdi["HDI rank"]< 116), 'Hight_IDH',
                                  np.where((data_hdi["HDI rank"] >= 116) & (data_hdi["HDI rank"] < 160), 'Medium_IDH',
                                           np.where(data_hdi["HDI rank"] >= 160, 'Low_IDH', np.nan))))

replace_Colstring(data_hdi,"account","1","oui")
replace_Colstring(data_hdi,"account","0","non")

#data_hdi.to_csv("findex_hdi.csv")

data1=data_hdi.groupby('account')['wgt'].sum()/data_hdi['wgt'].sum()

data_hdi.head(2)

# Proportion des adultes ayant un compte ou non en tenant compte du poids des repondants
data1=data_hdi.groupby('account')['wgt'].sum()/data_hdi['wgt'].sum()
# Plot the pie chart
plt.pie(data1, labels=data1.index, autopct='%1.1f%%')
#plt.title("Répartition des adultes selon qu'ils aient un compte bancaire/ mobile money ou non")
plt.show()

# Comment la proportion d'adultes possédant un compte bancaire varie-t-elle selon les économies et les régions ?
# Pour répondre à la question on fera un test de khi deux
# On transforme la colonne account
replace_Colstring(data_hdi, "account", "1","oui")
replace_Colstring(data_hdi, "account", "0","non")

# On cree un tableau croisé
table = pd.crosstab(data_hdi['economy'], data_hdi['account'])
table

# On réalise un test de khi deux pour étudier la dépendance entre avoir un compte et être dans une économie donnée
chi2, p, dof, expected = chi2_contingency(table)

# la p-value du test
if p < 0.05:
    print("Il existe une dépendance significative entre les variables account et economy")
else:
    print("Il n'existe pas une dépendance significative entre les variables account et economy")

# On cree un tableau croisé
table = pd.crosstab(data_hdi['regionwb'], data_hdi['account'])
table

# On réalise un test de khi deux pour étudier la dépendance entre avoir un compte et être dans une région donnée.
chi2, p, dof, expected = chi2_contingency(table)

# la p-value du test
if p < 0.05:
    print("Il existe une dépendance significative entre les variables account et regionwb")
else:
    print("Il n'existe pas une dépendance significative entre les variables account et regionwb")

#Dans quelle mesure le niveau d'éducation influence-t-il l'accès aux services financiers ? 
replace_Colstring(data_hdi,"educ","1","primaire")
replace_Colstring(data_hdi,"educ","2","secondaire")
replace_Colstring(data_hdi,"educ","3","supérieur")
replace_Colstring(data_hdi,"educ","4","")
replace_Colstring(data_hdi,"educ","5","")



# On groupz les données par 'educ' et on calcule la proportion des adultes dans chaque groupe en tenant compte du poids des repondants
#on exclu les modalités 4 et 5
data3=data_hdi
data3=replace_Colstring(data3,"account","oui","1")
data3=replace_Colstring(data3,"account","non","0")
data3["account"]=data3["account"].astype(int)
data3=data3.loc[data_hdi.educ !='',]
account_by_educ = data3.groupby('educ')['account'].mean()

# Plot the bar chart
plt.bar(account_by_educ.index, account_by_educ)
plt.xlabel("Niveau d'éducation")
plt.ylabel('Proportion des adultes ayant un compte')
#plt.title("Influence du niveau de l'éducation sur l'accès aux services financiers")
plt.show()

# tableau de contingence de l'urbanisation vs account
table = pd.crosstab(data_hdi['urbanicity_f2f'], data_hdi['account'], values=data_hdi['wgt'], aggfunc='sum')

#  test de khi 2
chi2, p, dof, expected = chi2_contingency(table)

# la p-value du test
if p < 0.05:
    print("Il existe une dépendance significative entre les variables account et la zone d'habitaion")
else:
    print("Il n'existe pas une dépendance significative entre les variables account et la zone d'habitaion")

replace_Colstring(data_hdi, "urbanicity_f2f","1","Rural")
replace_Colstring(data_hdi, "urbanicity_f2f","2","Urbain")



# Calcule de la proportion des adultes ayant  un compte

data_hdi_clean = data_hdi.dropna(subset=['urbanicity_f2f', 'account'])
urban_groups = data_hdi_clean.groupby('urbanicity_f2f')
account_by_urban = urban_groups['account'].apply(lambda x: x.sum()/x.count())

# diagramme en barre
plt.bar(account_by_urban.index, account_by_urban.values)
plt.xlabel("Typologie urbain / rural")
plt.ylabel('Proportion des adultes ayant un compte')
plt.show()

# Cross-tabulation of 'account' and 'female' variables, taking weight into account
replace_Colstring(data_hdi,"female","1","Femmes")
replace_Colstring(data_hdi,"female","2","Hommes")
data_hdi_clean = data_hdi.dropna(subset=['account', 'female', 'wgt'])
account_by_gender = data_hdi_clean.groupby(['account', 'female'])['wgt'].sum()

# la p-value du test
if p < 0.05:
    print("Il existe une dépendance significative entre le genre du répondant et sa détention d'un compte")
else:
    print("Il n'existe pas une dépendance significative entre le genre du répondant et sa détention d'un compte")

data_hdi.columns

data_hdi=data_hdi.loc[~data_hdi.Worries.isna(),]
data_hdi=data_hdi.loc[data_hdi["Worries"].isin([1, 2,3,4]),]



data_hdi.Worries.unique()

data_hdi=replace_Colstring(data_hdi,"Worries","1.0", "Vieillesse")
data_hdi=replace_Colstring(data_hdi,"Worries","2.0", "Frais medicaux")
data_hdi=replace_Colstring(data_hdi,"Worries","3.0", "Factures")
data_hdi=replace_Colstring(data_hdi,"Worries","4.0", "Education")

data_hdi=replace_Colstring(data_hdi,"regionwb",'Europe & Central Asia (excluding high income)',"Europe & Central Asia")
data_hdi=replace_Colstring(data_hdi,"regionwb",'Middle East & North Africa (excluding high income)',"Middle East & North Africa")
data_hdi=replace_Colstring(data_hdi,"regionwb",'Latin America & Caribbean (excluding high income)',"Latin America & Caribbean")
data_hdi=replace_Colstring(data_hdi,"regionwb",'Sub-Saharan Africa (excluding high income)',"Sub-Saharan Africa")
data_hdi=replace_Colstring(data_hdi,"regionwb",'East Asia & Pacific (excluding high income)',"East Asia & Pacific")

# Vérifier l'hypothèse d'indépendance entre la proportion d'adultes sans compte bancaire
cols = ['NoAc_Expensive', 'NoAc_Family', 'NoAc_Far', 'NoAc_LackDoc', 'NoAc_Money',
        'NoAc_NoFinServices', 'NoAc_ReligiousRea', 'NoAc_lackTrust',"internetaccess","Received_Wage","AccountNoHelp"]
data_filtered = data_hdi[['account',"economy","regionwb","Worries","age","wgt","class_IDH"] + cols].loc[data_hdi[cols].isin([1, 2]).all(1)]
data_filtered=replace_Colstring(data_filtered,"account","0","No")
data_filtered=replace_Colstring(data_filtered,"account","1","Yes")
 
data_filtered[['NoAc_Expensive', 'NoAc_Family', 'NoAc_Far', 'NoAc_LackDoc', 'NoAc_Money',
      'NoAc_NoFinServices', 'NoAc_ReligiousRea', 'NoAc_lackTrust',"internetaccess", 'Received_Wage',"AccountNoHelp"]] = data_filtered[['NoAc_Expensive',
            'NoAc_Family', 'NoAc_Far', 'NoAc_LackDoc', 'NoAc_Money', 'NoAc_NoFinServices',
             'NoAc_ReligiousRea', 'NoAc_lackTrust',"internetaccess", 'Received_Wage',"AccountNoHelp"]].replace(2, "No")

data_filtered[['NoAc_Expensive', 'NoAc_Family', 'NoAc_Far', 'NoAc_LackDoc', 'NoAc_Money',
      'NoAc_NoFinServices', 'NoAc_ReligiousRea', 'NoAc_lackTrust',"internetaccess", 'Received_Wage',"AccountNoHelp"]] = data_filtered[['NoAc_Expensive',
            'NoAc_Family', 'NoAc_Far', 'NoAc_LackDoc', 'NoAc_Money', 'NoAc_NoFinServices',
             'NoAc_ReligiousRea', 'NoAc_lackTrust',"internetaccess", 'Received_Wage',"AccountNoHelp"]].replace(1, "Yes")

data_filtered.dropna(inplace=True)

data_filtered.isnull().sum()

data_filtered.Received_Wage.unique()

data_filtered.head()

data_filtered.to_csv("Findex_cleaned.csv", encoding="utf-8")

data_filtered.economy.nunique()

# filtre de data_filtred pour ne retenir que les pays ayant les plus faibles niveau d'IDH
LowIDH_economies = data_filtered[data_filtered["class_IDH"] == "Low_IDH"]
# En fin on télécharge les données sous format csv
LowIDH_economies.to_csv("LowIDH.csv")

